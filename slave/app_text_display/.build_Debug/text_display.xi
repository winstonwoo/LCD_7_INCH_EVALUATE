# 1 "J:/ProjectEstimated2014/XMOS/HMI/REF_8080_RGB/HMI/slave/module_kentec_text_display/src/text_display.xc"
# 1 "platform.h" 1 3
# 21 "platform.h" 3
# 1 "J://ProjectEstimated2014//XMOS//HMI//REF_8080_RGB//HMI//slave//app_text_display//.build_Debug//XS1-L01A-TQ128-C5.h" 1
# 4 "J://ProjectEstimated2014//XMOS//HMI//REF_8080_RGB//HMI//slave//app_text_display//.build_Debug//XS1-L01A-TQ128-C5.h"
# 1 "xs1.h" 1 3
# 19 "xs1.h" 3
# 1 "timer.h" 1 3
# 33 "timer.h" 3
void delay_ticks(unsigned ticks);
# 40 "timer.h" 3
void delay_ticks_longlong(unsigned long long ticks);
# 46 "timer.h" 3
inline void delay_seconds(unsigned int delay) {
  delay_ticks_longlong( 100U  * 1000000 * (unsigned long long)delay);
}
# 54 "timer.h" 3
inline void delay_milliseconds(unsigned delay) {
  delay_ticks_longlong( 100U  * 1000 * (unsigned long long)delay);
}
# 62 "timer.h" 3
inline void delay_microseconds(unsigned delay) {
  delay_ticks_longlong( 100U  * (unsigned long long)delay);
}
# 20 "xs1.h" 2 3
# 33 "xs1.h" 3
# 1 "xs1_g4000b-512.h" 1 3
# 34 "xs1.h" 2 3
# 39 "xs1.h" 3
# 1 "xs1_user.h" 1 3
# 20 "xs1_user.h" 3
# 1 "xs1b_user.h" 1 3
# 21 "xs1_user.h" 2 3
# 40 "xs1.h" 2 3
# 1 "xs1_kernel.h" 1 3
# 20 "xs1_kernel.h" 3
# 1 "xs1b_kernel.h" 1 3
# 21 "xs1_kernel.h" 2 3
# 41 "xs1.h" 2 3
# 1 "xs1_registers.h" 1 3
# 20 "xs1_registers.h" 3
# 1 "xs1b_registers.h" 1 3
# 29 "xs1b_registers.h" 3
# 1 "xs1_g_registers.h" 1 3
# 30 "xs1b_registers.h" 2 3
# 1 "xs1_l_registers.h" 1 3
# 31 "xs1b_registers.h" 2 3
# 21 "xs1_registers.h" 2 3
# 42 "xs1.h" 2 3
# 1 "xs1_clock.h" 1 3
# 43 "xs1.h" 2 3
# 72 "xs1.h" 3
void configure_in_port_handshake(void port p, in port readyin,
                                 out port readyout,  __clock_t  clk);
# 101 "xs1.h" 3
void configure_out_port_handshake(void port p, in port readyin,
                                 out port readyout,  __clock_t  clk,
                                 unsigned initial);
# 127 "xs1.h" 3
void configure_in_port_strobed_master(void port p, out port readyout,
                                      const  __clock_t  clk);
# 150 "xs1.h" 3
void configure_out_port_strobed_master(void port p, out port readyout,
                                      const  __clock_t  clk, unsigned initial);
# 172 "xs1.h" 3
void configure_in_port_strobed_slave(void port p, in port readyin,  __clock_t  clk);
# 197 "xs1.h" 3
void configure_out_port_strobed_slave(void port p, in port readyin,  __clock_t  clk,
                                      unsigned initial);
# 221 "xs1.h" 3
void configure_in_port(void port p, const  __clock_t  clk);
# 227 "xs1.h" 3
void configure_in_port_no_ready(void port p, const  __clock_t  clk);
# 250 "xs1.h" 3
void configure_out_port(void port p, const  __clock_t  clk, unsigned initial);
# 256 "xs1.h" 3
void configure_out_port_no_ready(void port p, const  __clock_t  clk, unsigned initial);
# 266 "xs1.h" 3
void configure_port_clock_output(void port p, const  __clock_t  clk);
# 275 "xs1.h" 3
void start_port(void port p);
# 282 "xs1.h" 3
void stop_port(void port p);
# 295 "xs1.h" 3
void configure_clock_src( __clock_t  clk, void port p);
# 309 "xs1.h" 3
void configure_clock_ref( __clock_t  clk, unsigned char divide);
# 325 "xs1.h" 3
void configure_clock_rate( __clock_t  clk, unsigned a, unsigned b);
# 339 "xs1.h" 3
void configure_clock_rate_at_least( __clock_t  clk, unsigned a, unsigned b);
# 353 "xs1.h" 3
void configure_clock_rate_at_most( __clock_t  clk, unsigned a, unsigned b);
# 366 "xs1.h" 3
void set_clock_src( __clock_t  clk, void port p);
# 379 "xs1.h" 3
void set_clock_ref( __clock_t  clk);
# 395 "xs1.h" 3
void set_clock_div( __clock_t  clk, unsigned char div);
# 410 "xs1.h" 3
void set_clock_rise_delay( __clock_t  clk, unsigned n);
# 425 "xs1.h" 3
void set_clock_fall_delay( __clock_t  clk, unsigned n);
# 445 "xs1.h" 3
void set_port_clock(void port p, const  __clock_t  clk);
# 463 "xs1.h" 3
void set_port_ready_src(void port p, void port ready);
# 481 "xs1.h" 3
void set_clock_ready_src( __clock_t  clk, void port ready);
# 491 "xs1.h" 3
void set_clock_on( __clock_t  clk);
# 501 "xs1.h" 3
void set_clock_off( __clock_t  clk);
# 511 "xs1.h" 3
void start_clock( __clock_t  clk);
# 519 "xs1.h" 3
void stop_clock( __clock_t  clk);
# 529 "xs1.h" 3
void set_port_use_on(void port p);
# 539 "xs1.h" 3
void set_port_use_off(void port p);
# 549 "xs1.h" 3
void set_port_mode_data(void port p);
# 561 "xs1.h" 3
void set_port_mode_clock(void port p);
# 582 "xs1.h" 3
void set_port_mode_ready(void port p);
# 593 "xs1.h" 3
void set_port_drive(void port p);
# 609 "xs1.h" 3
void set_port_drive_low(void port p);
# 624 "xs1.h" 3
void set_port_pull_up(void port p);
# 639 "xs1.h" 3
void set_port_pull_down(void port p);
# 649 "xs1.h" 3
void set_port_pull_none(void port p);
# 663 "xs1.h" 3
void set_port_master(void port p);
# 677 "xs1.h" 3
void set_port_slave(void port p);
# 691 "xs1.h" 3
void set_port_no_ready(void port p);
# 706 "xs1.h" 3
void set_port_strobed(void port p);
# 719 "xs1.h" 3
void set_port_handshake(void port p);
# 728 "xs1.h" 3
void set_port_no_sample_delay(void port p);
# 737 "xs1.h" 3
void set_port_sample_delay(void port p);
# 745 "xs1.h" 3
void set_port_no_inv(void port p);
# 756 "xs1.h" 3
void set_port_inv(void port p);
# 779 "xs1.h" 3
void set_port_shift_count( void port p, unsigned n);
# 794 "xs1.h" 3
void set_pad_delay(void port p, unsigned n);
# 834 "xs1.h" 3
void set_core_fast_mode_on(void);
# 842 "xs1.h" 3
void set_core_fast_mode_off(void);
# 865 "xs1.h" 3
void outuchar(chanend c, unsigned char val);
# 880 "xs1.h" 3
void outuint(chanend c, unsigned val);
# 896 "xs1.h" 3
unsigned char inuchar(chanend c);
# 912 "xs1.h" 3
unsigned inuint(chanend c);
# 929 "xs1.h" 3
void inuchar_byref(chanend c, unsigned char &val);
# 947 "xs1.h" 3
void inuint_byref(chanend c, unsigned &val);
# 957 "xs1.h" 3
void sync(void port p);
# 968 "xs1.h" 3
unsigned peek(void port p);
# 982 "xs1.h" 3
void clearbuf(void port p);
# 998 "xs1.h" 3
unsigned endin( void port p);
# 1015 "xs1.h" 3
unsigned partin( void port p, unsigned n);
# 1031 "xs1.h" 3
void partout( void port p, unsigned n, unsigned val);
# 1049 "xs1.h" 3
unsigned partout_timed( void port p, unsigned n, unsigned val, unsigned t);
# 1067 "xs1.h" 3
{unsigned , unsigned } partin_timestamped( void port p, unsigned n);
# 1085 "xs1.h" 3
unsigned partout_timestamped( void port p, unsigned n, unsigned val);
# 1099 "xs1.h" 3
void outct(chanend c, unsigned char val);
# 1114 "xs1.h" 3
void chkct(chanend c, unsigned char val);
# 1129 "xs1.h" 3
unsigned char inct(chanend c);
# 1144 "xs1.h" 3
void inct_byref(chanend c, unsigned char &val);
# 1158 "xs1.h" 3
int testct(chanend c);
# 1171 "xs1.h" 3
int testwct(chanend c);
# 1186 "xs1.h" 3
void soutct(streaming chanend c, unsigned char val);
# 1202 "xs1.h" 3
void schkct(streaming chanend c, unsigned char val);
# 1218 "xs1.h" 3
unsigned char sinct(streaming chanend c);
# 1234 "xs1.h" 3
void sinct_byref(streaming chanend c, unsigned char &val);
# 1248 "xs1.h" 3
int stestct(streaming chanend c);
# 1262 "xs1.h" 3
int stestwct(streaming chanend c);
# 1276 "xs1.h" 3
transaction out_char_array(chanend c, const char src[size], unsigned size);
# 1289 "xs1.h" 3
transaction in_char_array(chanend c, char src[size], unsigned size);
# 1302 "xs1.h" 3
void sout_char_array(streaming chanend c, const char src[size], unsigned size);
# 1315 "xs1.h" 3
void sin_char_array(streaming chanend c, char src[size], unsigned size);
# 1338 "xs1.h" 3
void crc32(unsigned &checksum, unsigned data, unsigned poly);
# 1362 "xs1.h" 3
unsigned crc8shr(unsigned &checksum, unsigned data, unsigned poly);
# 1377 "xs1.h" 3
{unsigned, unsigned} lmul(unsigned a, unsigned b, unsigned c, unsigned d);
# 1391 "xs1.h" 3
{unsigned, unsigned} mac(unsigned a, unsigned b, unsigned c, unsigned d);
# 1405 "xs1.h" 3
{signed, unsigned} macs(signed a, signed b, signed c, unsigned d);
# 1419 "xs1.h" 3
signed sext(unsigned a, unsigned b);
# 1433 "xs1.h" 3
unsigned zext(unsigned a, unsigned b);
# 1446 "xs1.h" 3
void pinseq(unsigned val);
# 1459 "xs1.h" 3
void pinsneq(unsigned val);
# 1474 "xs1.h" 3
void pinseq_at(unsigned val, unsigned time);
# 1489 "xs1.h" 3
void pinsneq_at(unsigned val, unsigned time);
# 1502 "xs1.h" 3
void timerafter(unsigned val);
# 1538 "xs1.h" 3
unsigned getps(unsigned reg);
# 1549 "xs1.h" 3
void setps(unsigned reg, unsigned value);
# 1570 "xs1.h" 3
int read_pswitch_reg(unsigned tileid, unsigned reg, unsigned &data);
# 1594 "xs1.h" 3
int read_sswitch_reg(unsigned tileid, unsigned reg, unsigned &data);
# 1616 "xs1.h" 3
int write_pswitch_reg(unsigned tileid, unsigned reg, unsigned data);
# 1636 "xs1.h" 3
int write_pswitch_reg_no_ack(unsigned tileid, unsigned reg, unsigned data);
# 1655 "xs1.h" 3
int write_sswitch_reg(unsigned tileid, unsigned reg, unsigned data);
# 1676 "xs1.h" 3
int write_sswitch_reg_no_ack(unsigned tileid, unsigned reg, unsigned data);
# 1691 "xs1.h" 3
int read_tile_config_reg(tileref tile, unsigned reg, unsigned &data);
# 1705 "xs1.h" 3
int write_tile_config_reg(tileref tile, unsigned reg, unsigned data);
# 1720 "xs1.h" 3
int write_tile_config_reg_no_ack(tileref tile, unsigned reg, unsigned data);
# 1742 "xs1.h" 3
int read_node_config_reg(tileref tile, unsigned reg, unsigned &data);
# 1757 "xs1.h" 3
int write_node_config_reg(tileref tile, unsigned reg, unsigned data);
# 1773 "xs1.h" 3
int write_node_config_reg_no_ack(tileref tile, unsigned reg, unsigned data);
# 1792 "xs1.h" 3
int read_periph_8(tileref tile, unsigned peripheral, unsigned base_address,
                  unsigned size, unsigned char data[size]);
# 1811 "xs1.h" 3
int write_periph_8(tileref tile, unsigned peripheral, unsigned base_address,
                   unsigned size, const unsigned char data[size]);
# 1832 "xs1.h" 3
int write_periph_8_no_ack(tileref tile, unsigned peripheral,
                          unsigned base_address, unsigned size,
                          const unsigned char data[size]);
# 1854 "xs1.h" 3
int read_periph_32(tileref tile, unsigned peripheral, unsigned base_address,
                   unsigned size, unsigned data[size]);
# 1875 "xs1.h" 3
int write_periph_32(tileref tile, unsigned peripheral, unsigned base_address,
                    unsigned size, const unsigned data[size]);
# 1898 "xs1.h" 3
int write_periph_32_no_ack(tileref tile, unsigned peripheral,
                           unsigned base_address, unsigned size,
                           const unsigned data[size]);
# 1910 "xs1.h" 3
unsigned get_local_tile_id(void);
# 1920 "xs1.h" 3
unsigned get_tile_id(tileref t);
# 1929 "xs1.h" 3
unsigned get_logical_core_id(void);
# 1934 "xs1.h" 3
extern int __builtin_getid(void);
# 5 "J://ProjectEstimated2014//XMOS//HMI//REF_8080_RGB//HMI//slave//app_text_display//.build_Debug//XS1-L01A-TQ128-C5.h" 2
# 13 "J://ProjectEstimated2014//XMOS//HMI//REF_8080_RGB//HMI//slave//app_text_display//.build_Debug//XS1-L01A-TQ128-C5.h"
extern tileref tile[1];
# 22 "platform.h" 2 3
# 2 "J:/ProjectEstimated2014/XMOS/HMI/REF_8080_RGB/HMI/slave/module_kentec_text_display/src/text_display.xc" 2
# 1 "print.h" 1 3
# 34 "print.h" 3
int printchar(char value);
# 40 "print.h" 3
int printcharln(char value);
# 46 "print.h" 3
int printint(int value);
# 52 "print.h" 3
int printintln(int value);
# 58 "print.h" 3
int printuint(unsigned value);
# 64 "print.h" 3
int printuintln(unsigned value);
# 70 "print.h" 3
int printllong(long long value);
# 76 "print.h" 3
int printllongln(long long value);
# 82 "print.h" 3
int printullong(unsigned long long value);
# 88 "print.h" 3
int printullongln(unsigned long long value);
# 95 "print.h" 3
int printhex(unsigned value);
# 102 "print.h" 3
int printhexln(unsigned value);
# 109 "print.h" 3
int printllonghex(unsigned long long value);
# 116 "print.h" 3
int printllonghexln(unsigned long long value);
# 123 "print.h" 3
int printstr(const char (& alias s)[]);
# 133 "print.h" 3
int printstrln(const char (& alias s)[]);
# 3 "J:/ProjectEstimated2014/XMOS/HMI/REF_8080_RGB/HMI/slave/module_kentec_text_display/src/text_display.xc" 2
# 1 "stdlib.h" 1 3
# 4 "stdlib.h" 3
# 1 "stdlib.h" 1 3
# 10 "stdlib.h" 3
# 1 "_ansi.h" 1 3
# 15 "_ansi.h" 3
# 1 "newlib.h" 1 3
# 16 "_ansi.h" 2 3
# 1 "sys/config.h" 1 3
# 4 "sys/config.h" 3
# 1 "machine/ieeefp.h" 1 3
# 5 "sys/config.h" 2 3
# 17 "_ansi.h" 2 3
# 11 "stdlib.h" 2 3
# 14 "stdlib.h" 3
# 1 "stddef.h" 1 3
# 214 "stddef.h" 3
typedef  unsigned int  size_t;
# 326 "stddef.h" 3
typedef  unsigned char  wchar_t;
# 15 "stdlib.h" 2 3
# 16 "stdlib.h" 3
# 1 "sys/reent.h" 1 3
# 9 "sys/reent.h" 3
extern "C" {
# 13 "sys/reent.h" 3
# 1 "_ansi.h" 1 3
# 14 "sys/reent.h" 2 3
# 1 "sys/_types.h" 1 3
# 12 "sys/_types.h" 3
# 1 "machine/_types.h" 1 3
# 7 "machine/_types.h" 3
# 1 "machine/_default_types.h" 1 3
# 9 "machine/_default_types.h" 3
extern "C" {
# 22 "machine/_default_types.h" 3
# 1 "limits.h" 1 3
# 4 "limits.h" 3
# 1 "newlib.h" 1 3
# 5 "limits.h" 2 3
# 24 "limits.h" 3
# 1 "sys/config.h" 1 3
# 25 "limits.h" 2 3
# 23 "machine/_default_types.h" 2 3



typedef signed char __int8_t ;
typedef unsigned char __uint8_t ;








typedef signed short __int16_t;
typedef unsigned short __uint16_t;
# 46 "machine/_default_types.h" 3
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
# 58 "machine/_default_types.h" 3
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
# 76 "machine/_default_types.h" 3
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
# 99 "machine/_default_types.h" 3
typedef signed long long __int64_t;
typedef unsigned long long __uint64_t;
# 118 "machine/_default_types.h" 3
}
# 8 "machine/_types.h" 2 3
# 13 "sys/_types.h" 2 3
# 1 "sys/lock.h" 1 3




extern "C" {


typedef int _LOCK_SIMPLE_T;

typedef struct {

  unsigned _counter;


  unsigned _owner;
} _LOCK_FAIR_T;

typedef struct {
  int _owner;
  int _count;
} _LOCK_RECURSIVE_T;








void __lock_simple_init(volatile _LOCK_SIMPLE_T *);
void __lock_simple_close(volatile _LOCK_SIMPLE_T *);
void __lock_simple_acquire(volatile _LOCK_SIMPLE_T *);
int __lock_simple_try_acquire(volatile _LOCK_SIMPLE_T *);
void __lock_simple_release(volatile _LOCK_SIMPLE_T *);

void __lock_fair_init(volatile _LOCK_FAIR_T *);
void __lock_fair_close(volatile _LOCK_FAIR_T *);
void __lock_fair_acquire(volatile _LOCK_FAIR_T *);
int __lock_fair_try_acquire(volatile _LOCK_FAIR_T *);
void __lock_fair_release(volatile _LOCK_FAIR_T *);

void __lock_recursive_init(volatile _LOCK_RECURSIVE_T *);
void __lock_recursive_close(volatile _LOCK_RECURSIVE_T *);
void __lock_recursive_acquire(volatile _LOCK_RECURSIVE_T *);
int __lock_recursive_try_acquire(volatile _LOCK_RECURSIVE_T *);
void __lock_recursive_release(volatile _LOCK_RECURSIVE_T *);

typedef _LOCK_FAIR_T _LOCK_T;
# 68 "sys/lock.h" 3
};
# 14 "sys/_types.h" 2 3


typedef long _off_t;







typedef short __dev_t;




typedef unsigned short __uid_t;


typedef unsigned short __gid_t;
# 45 "sys/_types.h" 3
typedef long _fpos_t;
# 57 "sys/_types.h" 3
typedef int _ssize_t;
# 64 "sys/_types.h" 3
# 1 "stddef.h" 1 3
# 355 "stddef.h" 3
typedef  unsigned int  wint_t;
# 65 "sys/_types.h" 2 3



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;



typedef _LOCK_RECURSIVE_T _flock_t;




typedef void *_iconv_t;
# 15 "sys/reent.h" 2 3






typedef unsigned  long  __ULong;
# 36 "sys/reent.h" 3
struct _reent;
# 45 "sys/reent.h" 3
struct __sbuf {
	unsigned char *_base;
	int _size;
};
# 76 "sys/reent.h" 3
struct __sFILE;
# 172 "sys/reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 189 "sys/reent.h" 3
struct _reent;

extern  void   _cleanup ( void ) ;

extern __FILE *__stdin, *__stdout, *__stderr;

__FILE *  __getstdin (void) ;
__FILE *  __getstdout (void) ;
__FILE *  __getstderr (void) ;



}
# 17 "stdlib.h" 2 3
# 1 "machine/stdlib.h" 1 3
# 18 "stdlib.h" 2 3
# 19 "stdlib.h" 3
# 1 "alloca.h" 1 3
# 20 "stdlib.h" 2 3
# 26 "stdlib.h" 3
extern "C" {

typedef struct
{
  int quot;
  int rem;
} div_t;

typedef struct
{
  long quot;
  long rem;
} ldiv_t;


typedef struct
{
  long long int quot;
  long long int rem;
} lldiv_t;
# 57 "stdlib.h" 3
extern   int __mb_cur_max;



void   abort ( void ) ;
int  abs (int) ;
# 66 "stdlib.h" 3
double  atof (const char *__nptr) ;

float  atoff (const char *__nptr) ;

int  atoi (const char *__nptr) ;
long  atol (const char *__nptr) ;
# 79 "stdlib.h" 3
void *   calloc (size_t __nmemb, size_t __size) ;
div_t  div (int __numer, int __denom) ;
void   exit (int __status) ;
void   free ( void * ) ;
char *  getenv (const char *__string) ;
char *  _findenv ( const char *, int *) ;
long  labs (long) ;
ldiv_t  ldiv (long __numer, long __denom) ;
void *   malloc (size_t __size) ;
# 101 "stdlib.h" 3
int  mkstemp (char *) ;
char *  mktemp (char *) ;
# 107 "stdlib.h" 3
int  rand ( void ) ;
void *   realloc ( void * __r, size_t __size) ;
void   srand (unsigned __seed) ;
double  strtod (const char *__n, char **__end_PTR) ;
float  strtof (const char *__n, char **__end_PTR) ;






long  strtol (const char *__n, char **__end_PTR, int __base) ;
unsigned long  strtoul (const char *__n, char **__end_PTR, int __base) ;

int  system (const char *__string) ;

long  a64l (const char *__input) ;
char *  l64a (long __input) ;
# 128 "stdlib.h" 3
void   _Exit (int __status) ;
int  putenv (char *__string) ;
int  _putenv_r (struct _reent *, char *__string) ;
int  setenv (const char *__string, const char *__value, int __overwrite) ;

char *  gcvt (double,int,char *) ;
char *  gcvtf (float,int,char *) ;
char *  fcvt (double,int,int *,int *) ;
char *  fcvtf (float,int,int *,int *) ;
char *  ecvt (double,int,int *,int *) ;
char *  ecvtbuf (double, int, int*, int*, char *) ;
char *  fcvtbuf (double, int, int*, int*, char *) ;
char *  ecvtf (float,int,int *,int *) ;
char *  dtoa (double, int, int, int *, int*, char**) ;
int  rand_r (unsigned *__seed) ;

double  drand48 ( void ) ;
double  erand48 (unsigned short [3]) ;
long  jrand48 (unsigned short [3]) ;
void   lcong48 (unsigned short [7]) ;
long  lrand48 ( void ) ;
long  mrand48 ( void ) ;
long  nrand48 (unsigned short [3]) ;
unsigned short *
       seed48 (unsigned short [3]) ;
void   srand48 (long) ;
long long  atoll (const char *__nptr) ;
long long  _atoll_r (struct _reent *, const char *__nptr) ;
long long  llabs (long long) ;
lldiv_t  lldiv (long long __numer, long long __denom) ;
long long  strtoll (const char *__n, char **__end_PTR, int __base) ;
long long  _strtoll_r (struct _reent *, const char *__n, char **__end_PTR, int __base) ;
unsigned long long  strtoull (const char *__n, char **__end_PTR, int __base) ;
unsigned long long  _strtoull_r (struct _reent *, const char *__n, char **__end_PTR, int __base) ;


void   cfree ( void * ) ;
void  unsetenv (const char *__string) ;


char *  _dtoa_r (struct _reent *, double, int, int, int *, int*, char**) ;

void *   _malloc_r (struct _reent *, size_t) ;
void *   _calloc_r (struct _reent *, size_t, size_t) ;
void   _free_r (struct _reent *, void * ) ;
void *   _realloc_r (struct _reent *, void * , size_t) ;
void   _mstats_r (struct _reent *, char *) ;

int  _system_r (struct _reent *, const char *) ;

void   __eprintf (const char *, const char *, unsigned int, const char *) ;

}
# 5 "stdlib.h" 2 3
# 1 "safe/stdlib.h" 1 3
# 4 "safe/stdlib.h" 3
# 1 "stdlib.h" 1 3
# 5 "safe/stdlib.h" 2 3


int _safe_atoi(const char nptr[]);
long _safe_atol(const char nptr[]);
long long _safe_atoll(const char nptr[]);
char * movable _safe_calloc(size_t nmemb, size_t size);
void _safe_free(char * movable ptr);
char * alias _safe_getenv(const char string[]);
char * movable _safe_malloc(size_t size);
char * movable _safe_realloc(char * movable r, size_t size);
double _safe_strtod(const char n[], char * unsafe (&?endptr)[1]);
float _safe_strtof(const char n[], char * unsafe (&?endptr)[1]);
long _safe_strtol(const char n[], char * unsafe (&?endptr)[1], int base);
unsigned long _safe_strtoul(const char n[], char * unsafe (&?endptr)[1], int base);
long long _safe_strtoll(const char n[], char * unsafe (&?endptr)[1], int base);
unsigned long long _safe_strtoull(const char n[], char * unsafe (&?endptr)[1], int base);
int _safe_system(const char (&?string)[]);
# 6 "stdlib.h" 2 3
# 4 "J:/ProjectEstimated2014/XMOS/HMI/REF_8080_RGB/HMI/slave/module_kentec_text_display/src/text_display.xc" 2
# 1 "string.h" 1 3
# 4 "string.h" 3
# 1 "string.h" 1 3
# 10 "string.h" 3
# 1 "_ansi.h" 1 3
# 11 "string.h" 2 3
# 12 "string.h" 3
# 1 "sys/reent.h" 1 3
# 13 "string.h" 2 3
# 15 "string.h" 3
# 1 "stddef.h" 1 3
# 16 "string.h" 2 3
# 21 "string.h" 3
extern "C" {

void *   memchr (const void * , int, size_t) ;
int  memcmp (const void * , const void * , size_t) ;
void *   memcpy ( void * , const void * , size_t) ;
void *   memmove ( void * , const void * , size_t) ;
void *   memset ( void * , int, size_t) ;
char * strcat (char *, const char *) ;
char * strchr (const char *, int) ;
int  strcmp (const char *__s1, const char *__s2) ;
# 34 "string.h" 3
char * strcpy (char *, const char *) ;
size_t  strcspn (const char *__s1, const char *__s2) ;
char * strerror (int) ;
size_t  strlen (const char *__s) ;
char * strncat (char *, const char *, size_t) ;
int  strncmp (const char *__s1, const char *__s2, size_t) ;
char * strncpy (char *, const char *, size_t) ;
char * strpbrk (const char *, const char *) ;
char * strrchr (const char *, int) ;
size_t  strspn (const char *__s1, const char *__s2) ;
char * strstr (const char *, const char *) ;
# 54 "string.h" 3
char * strtok_r (char *, const char *, char **) ;

int  bcmp (const void *, const void *, size_t) ;
void  bcopy (const void *, void *, size_t) ;
void  bzero (void *, size_t) ;
int  ffs (int) ;
char * index (const char *, int) ;
void *   memccpy ( void * , const void * , int, size_t) ;
void *   mempcpy ( void * , const void * , size_t) ;
void *   memmem (const void * , size_t, const void * , size_t) ;
char * rindex (const char *, int) ;
char * stpcpy (char *, const char *) ;
char * stpncpy (char *, const char *, size_t) ;
int  strcasecmp (const char *, const char *) ;
char * strcasestr (const char *, const char *) ;
char * strdup (const char *) ;
char * strndup (const char *, size_t) ;
char * strerror_r (int, char *, size_t) ;
size_t  strlcat (char *, const char *, size_t) ;
size_t  strlcpy (char *, const char *, size_t) ;
int  strncasecmp (const char *, const char *, size_t) ;
size_t  strnlen (const char *, size_t) ;
char * strsep (char **, const char *) ;
char * strlwr (char *) ;
char * strupr (char *) ;
# 102 "string.h" 3
# 1 "sys/string.h" 1 3
# 103 "string.h" 2 3

}
# 5 "string.h" 2 3
# 1 "safe/string.h" 1 3
# 4 "safe/string.h" 3
# 1 "string.h" 1 3
# 5 "safe/string.h" 2 3


char * alias _safe_memchr(const char * alias s, int c, size_t n);
inline int _safe_memcmp(const char (& alias s1)[n], const char (& alias s2)[n], size_t n) {
  return memcmp(s1, s2, n);
}

inline char * alias _safe_memmove(char * alias s1, const char (& alias s2)[n], size_t n) {
  if (__builtin_array_bound(s1) < n)
    __builtin_trap();
  memmove(s1, s2, n);
  return s1;
}
inline char * alias _safe_memset(char * alias s, int c, size_t n) {
  if (__builtin_array_bound(s) < n)
    __builtin_trap();
  memset(s, c, n);
  return s;
}
char * alias _safe_strcat(char * alias s1, const char s2[]);
char * alias _safe_strchr(const char * alias s, int c);
int _safe_strcmp(const char (& alias s1)[], const char (& alias s2)[]);
char * alias _safe_strcpy(char * alias s1, const char s2[]);
size_t _safe_strcspn(const char (& alias s1)[], const char (& alias s2)[]);
char * alias _safe_strerror(int errnum);
size_t _safe_strlen(const char s[]);
char * alias _safe_strncat(char * alias s1, const char s2[], size_t n);
int _safe_strncmp(const char (& alias s1)[], const char (& alias s2)[], size_t n);
char * alias _safe_strncpy(char * alias s1, const char s2[], size_t n);
char * alias _safe_strpbrk(const char * alias s1, const char s2[]);
char * alias _safe_strrchr(const char * alias s, int c);
size_t _safe_strspn(const char (& alias s1)[], const char s2[]);
char * alias _safe_strstr(const char * alias s1, const char s2[]);


size_t _safe_strnlen(const char s[], size_t n);
# 6 "string.h" 2 3
# 5 "J:/ProjectEstimated2014/XMOS/HMI/REF_8080_RGB/HMI/slave/module_kentec_text_display/src/text_display.xc" 2
# 1 "flashlib.h" 1 3
# 19 "flashlib.h" 3
# 1 "flash.h" 1 3
# 18 "flash.h" 3
# 1 "xs1_clock.h" 1 3
# 19 "flash.h" 2 3
# 34 "flash.h" 3
typedef enum {
  PROT_TYPE_NONE=0,
  PROT_TYPE_SR=1,
  PROT_TYPE_SECS=2,
  PROT_TYPE_SR_2X=3,
} fl_ProtectionType;


typedef enum {
  SECTOR_LAYOUT_REGULAR=0,
  SECTOR_LAYOUT_IRREGULAR
} fl_SectorLayout;


typedef struct {

  unsigned flashId;

  unsigned pageSize;

  unsigned numPages;

  unsigned char addrSize;

  unsigned clockDiv;

  unsigned char idCommand;
# 65 "flash.h" 3
  unsigned char idDummyBytes;

  unsigned char idBytes;

  unsigned idValue;

  unsigned char sectorEraseCommand;
# 76 "flash.h" 3
  unsigned sectorEraseSize;

  unsigned char writeEnableCommand;

  unsigned char writeDisableCommand;

  fl_ProtectionType protectionType;
  struct {
    struct {

      unsigned char setProtectedValue;

      unsigned char setUnprotectedValue;
    } statusBits;
    struct {

      unsigned char sectorProtectCommand;

      unsigned char sectorUnprotectCommand;
    } commandValues;
  } protection;

  unsigned int programPageCommand;

  unsigned char readCommand;
# 105 "flash.h" 3
  unsigned char readDummyBytes;

  fl_SectorLayout sectorLayout;
  struct {

    unsigned regularSectorSize;
    struct {

      unsigned char sectorCount;
# 118 "flash.h" 3
      unsigned char sectorSizesLog2[32];
    } irregularSectorSizes;
  } sectorSizes;

  unsigned char readSRCommand;

  unsigned int writeSRCommand;

  unsigned char wipBitMask;
} fl_DeviceSpec;


typedef struct {

  in buffered port:8 spiMISO;
  out port spiSS;
  out port spiCLK;
  out buffered port:8 spiMOSI;
  __clock_t  spiClkblk;
# 144 "flash.h" 3
} fl_SPIPorts;
# 152 "flash.h" 3
int fl_connect(fl_SPIPorts& SPI);
# 169 "flash.h" 3
int fl_connectToDevice(fl_SPIPorts &SPI, const fl_DeviceSpec spec[], unsigned n);
# 182 "flash.h" 3
int fl_getFlashType();
# 189 "flash.h" 3
unsigned fl_getFlashSize();
# 195 "flash.h" 3
int fl_disconnect();
# 201 "flash.h" 3
int fl_getFlashIdNum();
# 210 "flash.h" 3
int fl_getFlashIdStr( char buf[], int maxlen );





typedef struct {
  unsigned startAddress;
  unsigned size;
  unsigned version;
  int factory;
} fl_BootImageInfo;
# 231 "flash.h" 3
int fl_getFactoryImage(fl_BootImageInfo& bootImageInfo);
# 245 "flash.h" 3
int fl_getNextBootImage(fl_BootImageInfo& bootImageInfo);
# 256 "flash.h" 3
unsigned fl_getImageVersion(fl_BootImageInfo& bootImageInfo);
# 276 "flash.h" 3
int fl_startImageAdd(fl_BootImageInfo &bootImageInfo, unsigned maxsize,
                     unsigned padding);
# 295 "flash.h" 3
int fl_startImageAddAt( unsigned offset, unsigned maxsize);
# 313 "flash.h" 3
int fl_startImageReplace(fl_BootImageInfo &bootImageInfo, unsigned maxsize);
# 323 "flash.h" 3
int fl_writeImagePage(const unsigned char page[]);
# 329 "flash.h" 3
int fl_endWriteImage(void);
# 339 "flash.h" 3
int fl_deleteImage(fl_BootImageInfo &bootImageInfo);
# 349 "flash.h" 3
int fl_startImageRead(fl_BootImageInfo &bootImageInfo);
# 357 "flash.h" 3
int fl_readImagePage(unsigned char page[]);
# 378 "flash.h" 3
unsigned fl_getDataPartitionSize(void);
# 388 "flash.h" 3
int fl_readData(unsigned offset, unsigned size, unsigned char dst[]);
# 397 "flash.h" 3
unsigned fl_getWriteScratchSize(unsigned offset, unsigned size);
# 409 "flash.h" 3
int fl_writeData(unsigned offset, unsigned size, const unsigned char src[],
                 unsigned char buffer[]);
# 418 "flash.h" 3
unsigned fl_getPageSize(void);
# 424 "flash.h" 3
unsigned fl_getNumDataPages(void);
# 433 "flash.h" 3
int fl_writeDataPage(unsigned n, const unsigned char src[]);
# 441 "flash.h" 3
int fl_readDataPage(unsigned n, unsigned char dst[]);
# 449 "flash.h" 3
unsigned fl_getNumDataSectors(void);
# 456 "flash.h" 3
unsigned fl_getDataSectorSize(unsigned n);
# 463 "flash.h" 3
int fl_eraseDataSector(unsigned n);
# 469 "flash.h" 3
int fl_eraseAllDataSectors(void);
# 475 "flash.h" 3
# 1 "SpecEnum.h" 1 3
# 4 "SpecEnum.h" 3
typedef enum
{
  UNKNOWN = 0,
  ALTERA_EPCS1 = 1,
  AMIC_A25L016 = 7,
  AMIC_A25L40P = 23,
  AMIC_A25L40PT = 8,
  AMIC_A25L40PUM = 9,
  AMIC_A25L80P = 10,
  ATMEL_AT25DF021 = 11,
  ATMEL_AT25DF041A = 2,
  ATMEL_AT25F512 = 12,
  ATMEL_AT25FS010 = 5,
  ESMT_F25L004A = 13,
  MACRONIX_MX25L1005C = 24,
  MICRON_M25P40 = 25,
  NUMONYX_M25P10 = 14,
  NUMONYX_M25P16 = 15,
  NUMONYX_M45P10E = 16,
  SPANSION_S25FL204K = 17,
  SST_SST25VF010 = 18,
  SST_SST25VF016 = 19,
  SST_SST25VF040 = 20,
  ST_M25PE10 = 3,
  ST_M25PE20 = 4,
  WINBOND_W25X10 = 21,
  WINBOND_W25X20 = 22,
  WINBOND_W25X40 = 6,
} fl_FlashId;
# 476 "flash.h" 2 3
# 480 "flash.h" 3
# 1 "SpecMacros.h" 1 3
# 481 "flash.h" 2 3
# 20 "flashlib.h" 2 3
# 26 "flashlib.h" 3
typedef fl_SPIPorts fl_PortHolderStruct;





int fl_getBusyStatus();


unsigned int fl_getFullStatus();
# 42 "flashlib.h" 3
int fl_eraseAll();


int fl_setWritability( int enable );


int fl_setProtection( int protect );
# 55 "flashlib.h" 3
int fl_getNumSectors();


int fl_getSectorSize( int sectorNum );


int fl_getSectorAddress( int sectorNum );


int fl_eraseSector( int sectorNum );


int fl_setSectorProtection( int sectorNum, int protect );
# 74 "flashlib.h" 3
unsigned fl_getNumPages();


int fl_writePage(unsigned int address, const unsigned char data[]);


int fl_readPage( unsigned int address, unsigned char data[] );
# 92 "flashlib.h" 3
unsigned int fl_setBootPartitionSize( unsigned int s );
unsigned int fl_getBootPartitionSize();


unsigned fl_getDataPartitionBase();
# 110 "flashlib.h" 3
int fl_eraseNextBootImage( fl_BootImageInfo& bootImageInfo );
# 6 "J:/ProjectEstimated2014/XMOS/HMI/REF_8080_RGB/HMI/slave/module_kentec_text_display/src/text_display.xc" 2
# 7 "J:/ProjectEstimated2014/XMOS/HMI/REF_8080_RGB/HMI/slave/module_kentec_text_display/src/text_display.xc"
# 1 "graphics.h" 1
# 11 "graphics.h"
void set_background_color(unsigned short color);
# 20 "graphics.h"
void set_foreground_color(unsigned short color);
# 27 "graphics.h"
unsigned short get_foreground_color(void);
# 33 "graphics.h"
unsigned short get_background_color(void);
# 8 "J:/ProjectEstimated2014/XMOS/HMI/REF_8080_RGB/HMI/slave/module_kentec_text_display/src/text_display.xc" 2
# 1 "lcd.h" 1
# 3 "lcd.h"
# 1 "xs1.h" 1 3
# 4 "lcd.h" 2
# 1 "lcd_defines.h" 1
# 4 "lcd_defines.h"
# 1 "lcd_conf.h" 1
# 5 "lcd_defines.h" 2
# 6 "lcd_defines.h"
# 1 "lcd_defines_AT043TN24V7.h" 1
# 4 "lcd_defines_AT043TN24V7.h"
# 1 "lcd_conf.h" 1
# 5 "lcd_defines_AT043TN24V7.h" 2
# 7 "lcd_defines.h" 2
# 1 "lcd_defines_K430WQAV4F.h" 1
# 4 "lcd_defines_K430WQAV4F.h"
# 1 "lcd_conf.h" 1
# 5 "lcd_defines_K430WQAV4F.h" 2
# 8 "lcd_defines.h" 2
# 1 "lcd_defines_K70DWN0V1F.h" 1
# 4 "lcd_defines_K70DWN0V1F.h"
# 1 "lcd_conf.h" 1
# 5 "lcd_defines_K70DWN0V1F.h" 2
# 9 "lcd_defines.h" 2


extern void lcd_fast_write(unsigned data, int time, out buffered port:32 lcd_rgb, out port lcd_data_enabled);
# 5 "lcd.h" 2
# 8 "lcd.h"
typedef struct lcd_ports {
  out port lcd_clk;
  out port lcd_data_enabled;
  out buffered port:32 lcd_rgb;
# 18 "lcd.h"
  __clock_t  clk_lcd;
} lcd_ports;
# 26 "lcd.h"
void lcd_server(chanend client, lcd_ports &ports);
# 32 "lcd.h"
void lcd_init(chanend c_lcd);
# 41 "lcd.h"
static inline void lcd_update(chanend c_lcd, unsigned buffer[]) {
  unsigned buffer_pointer;
  asm ("mov %0, %1" : "=r"(buffer_pointer) : "r"(buffer));
  __builtin_out_uint(c_lcd, buffer_pointer) ;
  __builtin_outct(c_lcd, 0x1 ) ;
}
# 55 "lcd.h"
static inline void lcd_update_p(chanend c_lcd, unsigned buffer) {
  __builtin_out_uint(c_lcd, buffer) ;
  __builtin_outct(c_lcd, 0x1 ) ;
}
# 64 "lcd.h"
#pragma select handler
static inline void lcd_req(chanend c_lcd) {
  __builtin_chkct(c_lcd, 0x1 ) ;
}
# 9 "J:/ProjectEstimated2014/XMOS/HMI/REF_8080_RGB/HMI/slave/module_kentec_text_display/src/text_display.xc" 2
# 1 "text_display.h" 1
# 4 "text_display.h"
# 1 "lcd_defines.h" 1
# 5 "text_display.h" 2






void text_display_from_flash(chanend c_lcd, short curRow, short curCol, unsigned flStart, unsigned flEnd);
void text_display_set_string(chanend c_lcd, char text[], short cursorRow, short cursorCol);
# 10 "J:/ProjectEstimated2014/XMOS/HMI/REF_8080_RGB/HMI/slave/module_kentec_text_display/src/text_display.xc" 2
# 1 "verdana16_h.h" 1
# 22 "verdana16_h.h"
const unsigned char verdana_16h_data_table[] = {


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x02, 0x10, 0x84, 0x21, 0x00, 0x42,
0x00, 0x00,


0x00, 0x00, 0xA5, 0x29, 0x40, 0x00, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x02, 0x43,
0xF8, 0x48, 0x12, 0x1F, 0xC2, 0x40, 0x90, 0x00,
0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x10, 0x10, 0x3E, 0x50, 0x50,
0x30, 0x1C, 0x12, 0x12, 0x7C, 0x10, 0x10, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x84,
0x22, 0x41, 0x14, 0x08, 0xA0, 0x3A, 0xE0, 0x28,
0x81, 0x44, 0x12, 0x21, 0x0E, 0x00, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x11, 0x04,
0x41, 0x10, 0x38, 0x91, 0x44, 0x21, 0x18, 0x39,
0x80, 0x00, 0x00, 0x00,


0x00, 0x24, 0x90, 0x00, 0x00, 0x00,


0x00, 0x00, 0x02, 0x10, 0x82, 0x10, 0x41, 0x04,
0x10, 0x20, 0x81, 0x02,


0x00, 0x00, 0x10, 0x20, 0x41, 0x02, 0x08, 0x20,
0x82, 0x10, 0x42, 0x10,


0x00, 0x00, 0x00, 0x01, 0x02, 0xA0, 0xE0, 0xA8,
0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20,
0x10, 0x7F, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42,
0x11, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42,
0x00, 0x00,


0x00, 0x00, 0x00, 0x02, 0x02, 0x04, 0x04, 0x08,
0x08, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x00,


0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42,
0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x08, 0x38, 0x08, 0x08,
0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x02,
0x04, 0x18, 0x20, 0x40, 0x7E, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x02, 0x02,
0x1C, 0x02, 0x02, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x04, 0x0C, 0x14, 0x24,
0x44, 0x7F, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x3E, 0x20, 0x20, 0x20,
0x3C, 0x02, 0x02, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x1C, 0x20, 0x40, 0x7C,
0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x7E, 0x02, 0x04, 0x04,
0x08, 0x08, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42,
0x3C, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42,
0x42, 0x3E, 0x02, 0x04, 0x38, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00,
0x08, 0x20, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00,
0x08, 0x20, 0x84, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C,
0x18, 0x30, 0x20, 0x0C, 0x01, 0x80, 0x30, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFE, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80,
0x30, 0x06, 0x00, 0x81, 0x83, 0x06, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x03, 0x88, 0x81, 0x04, 0x10,
0x20, 0x00, 0x81, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,
0x08, 0x20, 0x9E, 0x89, 0x12, 0x48, 0x92, 0x44,
0x92, 0x24, 0x91, 0x22, 0x7E, 0x08, 0x00, 0x3E,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x50,
0x28, 0x22, 0x11, 0x0F, 0x88, 0x24, 0x10, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x78, 0x44, 0x44, 0x44,
0x7C, 0x42, 0x42, 0x42, 0x7C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x01, 0xE1, 0x09, 0x00,
0x80, 0x40, 0x20, 0x10, 0x04, 0x21, 0xE0, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x07, 0xC2, 0x11, 0x04,
0x82, 0x41, 0x20, 0x90, 0x48, 0x47, 0xC0, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x7E, 0x40, 0x40, 0x40,
0x7E, 0x40, 0x40, 0x40, 0x7E, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x7E, 0x40, 0x40, 0x40,
0x7C, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x01, 0xE1, 0x09, 0x00,
0x80, 0x40, 0x23, 0x90, 0x44, 0x21, 0xF0, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x04, 0x12, 0x09, 0x04,
0x82, 0x7F, 0x20, 0x90, 0x48, 0x24, 0x10, 0x00,
0x00, 0x00,


0x00, 0x00, 0x07, 0x10, 0x84, 0x21, 0x08, 0x47,
0x00, 0x00,


0x00, 0x00, 0x00, 0x38, 0x20, 0x82, 0x08, 0x20,
0x82, 0xF0, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x42, 0x44, 0x48, 0x50,
0x60, 0x50, 0x48, 0x44, 0x42, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x04, 0x08, 0x10, 0x20, 0x40,
0x81, 0x02, 0x07, 0xE0, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0C, 0xC1,
0x94, 0x52, 0x8A, 0x4A, 0x49, 0x49, 0x11, 0x22,
0x24, 0x04, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x06, 0x13, 0x09, 0x44,
0xA2, 0x49, 0x22, 0x91, 0x48, 0x64, 0x30, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x08, 0x44,
0x09, 0x02, 0x40, 0x90, 0x24, 0x08, 0x84, 0x1E,
0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x7C, 0x42, 0x42, 0x42,
0x42, 0x7C, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x08, 0x44,
0x09, 0x02, 0x40, 0x90, 0x24, 0x08, 0x84, 0x1E,
0x00, 0x80, 0x18, 0x00,


0x00, 0x00, 0x00, 0x00, 0x07, 0xC2, 0x11, 0x08,
0x84, 0x44, 0x3C, 0x11, 0x08, 0x44, 0x10, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x03, 0xE2, 0x09, 0x00,
0x80, 0x3E, 0x00, 0x80, 0x48, 0x23, 0xE0, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x40, 0x20,
0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x80, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x04, 0x12, 0x09, 0x04,
0x82, 0x41, 0x20, 0x90, 0x44, 0x41, 0xC0, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x04, 0x12, 0x09, 0x04,
0x44, 0x22, 0x0A, 0x05, 0x01, 0x00, 0x80, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x21,
0x21, 0x09, 0x14, 0x48, 0xA2, 0x25, 0x21, 0x45,
0x0A, 0x28, 0x20, 0x81, 0x04, 0x00, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x04, 0x12, 0x08, 0x88,
0x28, 0x08, 0x0A, 0x08, 0x88, 0x24, 0x10, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x04, 0x11, 0x10, 0x88,
0x28, 0x14, 0x04, 0x02, 0x01, 0x00, 0x80, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x08, 0x08,
0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0xF0, 0x00,
0x00, 0x00,


0x00, 0x00, 0x0E, 0x20, 0x82, 0x08, 0x20, 0x82,
0x08, 0x20, 0x83, 0x80,


0x00, 0x00, 0x04, 0x08, 0x08, 0x10, 0x10, 0x20,
0x20, 0x40, 0x40, 0x80, 0x81, 0x00,


0x00, 0x00, 0x1C, 0x10, 0x41, 0x04, 0x10, 0x41,
0x04, 0x10, 0x47, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x14,
0x04, 0x41, 0x04, 0x40, 0x40, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,


0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x02,
0x02, 0x3E, 0x42, 0x42, 0x3E, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x5C, 0x62,
0x42, 0x42, 0x42, 0x42, 0x7C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42,
0x40, 0x40, 0x40, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x3E, 0x42,
0x42, 0x42, 0x42, 0x46, 0x3A, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42,
0x42, 0x7E, 0x40, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x07, 0x20, 0x87, 0x88, 0x20, 0x82,
0x08, 0x20, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x42,
0x42, 0x42, 0x42, 0x46, 0x3A, 0x02, 0x02, 0x3C,


0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x5C, 0x62,
0x42, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00,


0x00, 0x20, 0x12, 0x49, 0x24, 0x00,


0x00, 0x00, 0x04, 0x00, 0x03, 0x04, 0x10, 0x41,
0x04, 0x10, 0x41, 0x38,


0x00, 0x00, 0x02, 0x04, 0x08, 0x11, 0x24, 0x50,
0xC1, 0x42, 0x44, 0x40, 0x00, 0x00,


0x00, 0x24, 0x92, 0x49, 0x24, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x16, 0x63, 0x32, 0x44, 0x48, 0x89, 0x11, 0x22,
0x24, 0x44, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x62,
0x42, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42,
0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x62,
0x42, 0x42, 0x42, 0x42, 0x7C, 0x40, 0x40, 0x40,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x42,
0x42, 0x42, 0x42, 0x46, 0x3A, 0x02, 0x02, 0x02,


0x00, 0x00, 0x00, 0x01, 0x6C, 0x42, 0x10, 0x84,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x20, 0x40,
0x70, 0x10, 0x27, 0x80, 0x00, 0x00,


0x00, 0x00, 0x00, 0x20, 0x87, 0x88, 0x20, 0x82,
0x08, 0x18, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42,
0x42, 0x42, 0x42, 0x46, 0x3A, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42,
0x24, 0x24, 0x24, 0x18, 0x18, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x11, 0x12, 0x22, 0x2A, 0x85, 0x50, 0xAA, 0x08,
0x81, 0x10, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x22, 0x28,
0x20, 0xA2, 0x24, 0x40, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42,
0x24, 0x24, 0x24, 0x18, 0x18, 0x10, 0x10, 0x20,


0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x02, 0x08,
0x20, 0x82, 0x07, 0xC0, 0x00, 0x00,


0x00, 0x00, 0x00, 0x0C, 0x10, 0x10, 0x10, 0x10,
0x60, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0C, 0x00,


0x00, 0x00, 0x00, 0x81, 0x02, 0x04, 0x08, 0x10,
0x20, 0x40, 0x81, 0x02, 0x04, 0x00,


0x00, 0x00, 0x00, 0x30, 0x08, 0x08, 0x08, 0x08,
0x06, 0x08, 0x08, 0x08, 0x08, 0x08, 0x30, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0x84, 0x4C, 0x88, 0x60, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x02, 0x10, 0x04, 0x21, 0x08, 0x42,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x3E, 0x48,
0x48, 0x48, 0x48, 0x48, 0x3E, 0x08, 0x08, 0x00,


0x00, 0x00, 0x00, 0x00, 0x1C, 0x22, 0x20, 0x20,
0x7C, 0x20, 0x20, 0x40, 0x7E, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x3C,
0x24, 0x24, 0x3C, 0x42, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x41, 0x22, 0x22, 0x14,
0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x81, 0x02, 0x04, 0x08, 0x00,
0x00, 0x40, 0x81, 0x02, 0x04, 0x00,


0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x40, 0x38,
0x44, 0x42, 0x22, 0x1C, 0x02, 0x42, 0x3C, 0x00,


0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,
0x08, 0x20, 0x9C, 0x89, 0x12, 0x48, 0x12, 0x40,
0x92, 0x04, 0x91, 0x22, 0x72, 0x08, 0x20, 0x3E,
0x00, 0x00,


0x00, 0x00, 0x00, 0x03, 0x80, 0x8F, 0x22, 0x44,
0x78, 0x00, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x24,
0x48, 0x48, 0x24, 0x12, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x7F, 0x00, 0x80, 0x40, 0x20, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,
0x08, 0x20, 0x9C, 0x88, 0x92, 0x44, 0x92, 0x38,
0x91, 0x44, 0x89, 0x22, 0x46, 0x08, 0x20, 0x3E,
0x00, 0x00,


0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x03, 0x88, 0x91, 0x22, 0x38,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20,
0xFE, 0x08, 0x04, 0x02, 0x0F, 0xE0, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x03, 0x09, 0x02, 0x08, 0x20,
0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x07, 0x80, 0x8E, 0x02, 0x04,
0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42,
0x42, 0x42, 0x42, 0x42, 0x7E, 0x40, 0x40, 0x40,


0x00, 0x00, 0x00, 0x00, 0x3E, 0x7A, 0x7A, 0x7A,
0x3A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x30,


0x00, 0x00, 0x00, 0x01, 0x06, 0x04, 0x08, 0x10,
0x70, 0x00, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x03, 0x88, 0x91, 0x22, 0x44,
0x70, 0x00, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x24,
0x12, 0x12, 0x24, 0x48, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08,
0x30, 0x80, 0x84, 0x04, 0x44, 0x22, 0x61, 0x25,
0x02, 0x48, 0x13, 0xE1, 0x02, 0x00, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08,
0x30, 0x80, 0x84, 0x04, 0x4C, 0x22, 0x91, 0x20,
0x82, 0x08, 0x10, 0x81, 0x0F, 0x00, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08,
0x04, 0x40, 0xC4, 0x01, 0x24, 0x0A, 0x63, 0xA5,
0x01, 0x48, 0x13, 0xE0, 0x82, 0x00, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x08, 0x10,
0x41, 0x02, 0x23, 0x80, 0x00, 0x00,


0x00, 0x04, 0x01, 0x00, 0x00, 0x80, 0x40, 0x50,
0x28, 0x22, 0x11, 0x0F, 0x88, 0x24, 0x10, 0x00,
0x00, 0x00,


0x00, 0x02, 0x02, 0x00, 0x00, 0x80, 0x40, 0x50,
0x28, 0x22, 0x11, 0x0F, 0x88, 0x24, 0x10, 0x00,
0x00, 0x00,


0x00, 0x06, 0x04, 0x80, 0x00, 0x80, 0x40, 0x50,
0x28, 0x22, 0x11, 0x0F, 0x88, 0x24, 0x10, 0x00,
0x00, 0x00,


0x00, 0x0D, 0x0B, 0x00, 0x00, 0x80, 0x40, 0x50,
0x28, 0x22, 0x11, 0x0F, 0x88, 0x24, 0x10, 0x00,
0x00, 0x00,


0x00, 0x00, 0x08, 0x80, 0x00, 0x80, 0x40, 0x50,
0x28, 0x22, 0x11, 0x0F, 0x88, 0x24, 0x10, 0x00,
0x00, 0x00,


0x00, 0x0E, 0x08, 0x84, 0x41, 0xC0, 0x40, 0x50,
0x28, 0x22, 0x11, 0x0F, 0x88, 0x24, 0x10, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE,
0x05, 0x00, 0x48, 0x02, 0x40, 0x23, 0xE1, 0xF0,
0x10, 0x80, 0x84, 0x04, 0x3E, 0x00, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x01, 0xE1, 0x09, 0x00,
0x80, 0x40, 0x20, 0x10, 0x04, 0x21, 0xE0, 0x10,
0x08, 0x18,


0x00, 0x10, 0x08, 0x00, 0x7E, 0x40, 0x40, 0x40,
0x7E, 0x40, 0x40, 0x40, 0x7E, 0x00, 0x00, 0x00,


0x00, 0x08, 0x10, 0x00, 0x7E, 0x40, 0x40, 0x40,
0x7E, 0x40, 0x40, 0x40, 0x7E, 0x00, 0x00, 0x00,


0x00, 0x18, 0x24, 0x00, 0x7E, 0x40, 0x40, 0x40,
0x7E, 0x40, 0x40, 0x40, 0x7E, 0x00, 0x00, 0x00,


0x00, 0x00, 0x24, 0x00, 0x7E, 0x40, 0x40, 0x40,
0x7E, 0x40, 0x40, 0x40, 0x7E, 0x00, 0x00, 0x00,


0x01, 0x04, 0x07, 0x10, 0x84, 0x21, 0x08, 0x47,
0x00, 0x00,


0x00, 0x88, 0x07, 0x10, 0x84, 0x21, 0x08, 0x47,
0x00, 0x00,


0x01, 0x92, 0x07, 0x10, 0x84, 0x21, 0x08, 0x47,
0x00, 0x00,


0x00, 0x22, 0x07, 0x10, 0x84, 0x21, 0x08, 0x47,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x42,
0x08, 0x21, 0x04, 0x78, 0x84, 0x10, 0x82, 0x10,
0x83, 0xE0, 0x00, 0x00, 0x00, 0x00,


0x00, 0x0D, 0x0B, 0x00, 0x06, 0x13, 0x09, 0x44,
0xA2, 0x49, 0x22, 0x91, 0x48, 0x64, 0x30, 0x00,
0x00, 0x00,


0x00, 0x02, 0x00, 0x40, 0x00, 0x1E, 0x08, 0x44,
0x09, 0x02, 0x40, 0x90, 0x24, 0x08, 0x84, 0x1E,
0x00, 0x00, 0x00, 0x00,


0x00, 0x01, 0x00, 0x80, 0x00, 0x1E, 0x08, 0x44,
0x09, 0x02, 0x40, 0x90, 0x24, 0x08, 0x84, 0x1E,
0x00, 0x00, 0x00, 0x00,


0x00, 0x03, 0x01, 0x20, 0x00, 0x1E, 0x08, 0x44,
0x09, 0x02, 0x40, 0x90, 0x24, 0x08, 0x84, 0x1E,
0x00, 0x00, 0x00, 0x00,


0x00, 0x03, 0x41, 0x60, 0x00, 0x1E, 0x08, 0x44,
0x09, 0x02, 0x40, 0x90, 0x24, 0x08, 0x84, 0x1E,
0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x01, 0x20, 0x00, 0x1E, 0x08, 0x44,
0x09, 0x02, 0x40, 0x90, 0x24, 0x08, 0x84, 0x1E,
0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41,
0x04, 0x40, 0x50, 0x04, 0x01, 0x40, 0x44, 0x10,
0x40, 0x00, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x02, 0x1F, 0x08, 0x44,
0x29, 0x12, 0x48, 0x92, 0x25, 0x08, 0x84, 0x3E,
0x10, 0x00, 0x00, 0x00,


0x00, 0x04, 0x01, 0x00, 0x04, 0x12, 0x09, 0x04,
0x82, 0x41, 0x20, 0x90, 0x44, 0x41, 0xC0, 0x00,
0x00, 0x00,


0x00, 0x02, 0x02, 0x00, 0x04, 0x12, 0x09, 0x04,
0x82, 0x41, 0x20, 0x90, 0x44, 0x41, 0xC0, 0x00,
0x00, 0x00,


0x00, 0x06, 0x04, 0x80, 0x04, 0x12, 0x09, 0x04,
0x82, 0x41, 0x20, 0x90, 0x44, 0x41, 0xC0, 0x00,
0x00, 0x00,


0x00, 0x00, 0x08, 0x80, 0x04, 0x12, 0x09, 0x04,
0x82, 0x41, 0x20, 0x90, 0x44, 0x41, 0xC0, 0x00,
0x00, 0x00,


0x00, 0x02, 0x02, 0x00, 0x04, 0x11, 0x10, 0x88,
0x28, 0x14, 0x04, 0x02, 0x01, 0x00, 0x80, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x7C, 0x42,
0x42, 0x42, 0x7C, 0x40, 0x40, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x38, 0x44, 0x44, 0x44, 0x58,
0x44, 0x42, 0x42, 0x42, 0x5C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x3C, 0x02,
0x02, 0x3E, 0x42, 0x42, 0x3E, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x04, 0x08, 0x00, 0x3C, 0x02,
0x02, 0x3E, 0x42, 0x42, 0x3E, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x0C, 0x12, 0x00, 0x3C, 0x02,
0x02, 0x3E, 0x42, 0x42, 0x3E, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x1A, 0x2C, 0x00, 0x3C, 0x02,
0x02, 0x3E, 0x42, 0x42, 0x3E, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x3C, 0x02,
0x02, 0x3E, 0x42, 0x42, 0x3E, 0x00, 0x00, 0x00,


0x00, 0x0C, 0x12, 0x12, 0x0C, 0x00, 0x3C, 0x02,
0x02, 0x3E, 0x42, 0x42, 0x3E, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0E, 0xE0, 0x22, 0x04, 0x47, 0xF9, 0x10, 0x22,
0x23, 0xB8, 0x00, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42,
0x40, 0x40, 0x40, 0x42, 0x3C, 0x04, 0x04, 0x18,


0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x3C, 0x42,
0x42, 0x7E, 0x40, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x04, 0x08, 0x00, 0x3C, 0x42,
0x42, 0x7E, 0x40, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x18, 0x24, 0x00, 0x3C, 0x42,
0x42, 0x7E, 0x40, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x3C, 0x42,
0x42, 0x7E, 0x40, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x22, 0x12, 0x49, 0x24, 0x00,


0x00, 0x02, 0x40, 0x44, 0x44, 0x44, 0x40, 0x00,


0x00, 0x00, 0x08, 0x50, 0x02, 0x08, 0x20, 0x82,
0x08, 0x20, 0x00, 0x00,


0x00, 0x00, 0xA0, 0x44, 0x44, 0x44, 0x40, 0x00,


0x00, 0x00, 0x00, 0x14, 0x08, 0x34, 0x02, 0x3E,
0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x1A, 0x2C, 0x00, 0x5C, 0x62,
0x42, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x3C, 0x42,
0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x3C, 0x42,
0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x18, 0x24, 0x00, 0x3C, 0x42,
0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x1A, 0x2C, 0x00, 0x3C, 0x42,
0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x3C, 0x42,
0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20,
0x00, 0x7F, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x3C, 0x46,
0x4A, 0x52, 0x52, 0x62, 0x3C, 0x40, 0x00, 0x00,


0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x42, 0x42,
0x42, 0x42, 0x42, 0x46, 0x3A, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x42, 0x42,
0x42, 0x42, 0x42, 0x46, 0x3A, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x18, 0x24, 0x00, 0x42, 0x42,
0x42, 0x42, 0x42, 0x46, 0x3A, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x42, 0x42,
0x42, 0x42, 0x42, 0x46, 0x3A, 0x00, 0x00, 0x00,


0x00, 0x00, 0x00, 0x04, 0x08, 0x00, 0x42, 0x42,
0x24, 0x24, 0x24, 0x18, 0x18, 0x10, 0x10, 0x20,


0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x5C, 0x62,
0x42, 0x42, 0x42, 0x42, 0x7C, 0x40, 0x40, 0x40,


0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x42, 0x42,
0x24, 0x24, 0x24, 0x18, 0x18, 0x10, 0x10, 0x20,

};
# 864 "verdana16_h.h"
const unsigned int verdana_16h_offset_table[] = {


  		     0,
  		    10,
  		    20,
  		    30,
  		    50,
  		    66,
  		    92,
  		   112,
  		   118,
  		   130,
  		   142,
  		   160,
  		   178,
  		   188,
  		   202,
  		   212,
  		   228,
  		   244,
  		   260,
  		   276,
  		   292,
  		   308,
  		   324,
  		   340,
  		   356,
  		   372,
  		   388,
  		   400,
  		   412,
  		   430,
  		   448,
  		   466,
  		   480,
  		   506,
  		   524,
  		   540,
  		   558,
  		   576,
  		   592,
  		   608,
  		   626,
  		   644,
  		   654,
  		   666,
  		   682,
  		   696,
  		   718,
  		   736,
  		   756,
  		   772,
  		   792,
  		   810,
  		   828,
  		   846,
  		   864,
  		   882,
  		   908,
  		   926,
  		   944,
  		   962,
  		   974,
  		   988,
  		  1000,
  		  1022,
  		  1038,
  		  1054,
  		  1070,
  		  1086,
  		  1102,
  		  1118,
  		  1134,
  		  1146,
  		  1162,
  		  1178,
  		  1184,
  		  1196,
  		  1210,
  		  1216,
  		  1238,
  		  1254,
  		  1270,
  		  1286,
  		  1302,
  		  1312,
  		  1326,
  		  1338,
  		  1354,
  		  1370,
  		  1392,
  		  1406,
  		  1422,
  		  1436,
  		  1452,
  		  1466,
  		  1482,
};
# 975 "verdana16_h.h"
const unsigned char verdana_16h_index_table[] = {


  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  0,
  		  1,
  		  2,
  		  3,
  		  4,
  		  5,
  		  6,
  		  7,
  		  8,
  		  9,
  		 10,
  		 11,
  		 12,
  		 13,
  		 14,
  		 15,
  		 16,
  		 17,
  		 18,
  		 19,
  		 20,
  		 21,
  		 22,
  		 23,
  		 24,
  		 25,
  		 26,
  		 27,
  		 28,
  		 29,
  		 30,
  		 31,
  		 32,
  		 33,
  		 34,
  		 35,
  		 36,
  		 37,
  		 38,
  		 39,
  		 40,
  		 41,
  		 42,
  		 43,
  		 44,
  		 45,
  		 46,
  		 47,
  		 48,
  		 49,
  		 50,
  		 51,
  		 52,
  		 53,
  		 54,
  		 55,
  		 56,
  		 57,
  		 58,
  		 59,
  		 60,
  		 61,
  		 62,
  		 63,
  		 64,
  		 65,
  		 66,
  		 67,
  		 68,
  		 69,
  		 70,
  		 71,
  		 72,
  		 73,
  		 74,
  		 75,
  		 76,
  		 77,
  		 78,
  		 79,
  		 80,
  		 81,
  		 82,
  		 83,
  		 84,
  		 85,
  		 86,
  		 87,
  		 88,
  		 89,
  		 90,
  		 91,
  		 92,
  		 93,
  		 94,
};
# 1117 "verdana16_h.h"
const unsigned char verdana_16h_width_table[] = {


  		  5,
  		  5,
  		  5,
  		 10,
  		  8,
  		 13,
  		 10,
  		  3,
  		  6,
  		  6,
  		  9,
  		  9,
  		  5,
  		  7,
  		  5,
  		  8,
  		  8,
  		  8,
  		  8,
  		  8,
  		  8,
  		  8,
  		  8,
  		  8,
  		  8,
  		  8,
  		  6,
  		  6,
  		  9,
  		  9,
  		  9,
  		  7,
  		 13,
  		  9,
  		  8,
  		  9,
  		  9,
  		  8,
  		  8,
  		  9,
  		  9,
  		  5,
  		  6,
  		  8,
  		  7,
  		 11,
  		  9,
  		 10,
  		  8,
  		 10,
  		  9,
  		  9,
  		  9,
  		  9,
  		  9,
  		 13,
  		  9,
  		  9,
  		  9,
  		  6,
  		  7,
  		  6,
  		 11,
  		  8,
  		  8,
  		  8,
  		  8,
  		  8,
  		  8,
  		  8,
  		  6,
  		  8,
  		  8,
  		  3,
  		  6,
  		  7,
  		  3,
  		 11,
  		  8,
  		  8,
  		  8,
  		  8,
  		  5,
  		  7,
  		  6,
  		  8,
  		  8,
  		 11,
  		  7,
  		  8,
  		  7,
  		  8,
  		  7,
  		  8,
  		 11,

};
# 11 "J:/ProjectEstimated2014/XMOS/HMI/REF_8080_RGB/HMI/slave/module_kentec_text_display/src/text_display.xc" 2

extern unsigned lcd_buffer[2][ ( (800) * (16) /32) ];




fl_SPIPorts flash_ports = {  0x10200 ,
	0x10000 ,
	0x10100 ,
	0x10300 ,
	0x206  };

fl_DeviceSpec spec[1] = { {
# 24 "J:/ProjectEstimated2014/XMOS/HMI/REF_8080_RGB/HMI/slave/module_kentec_text_display/src/text_display.xc"
# 1 "MX25L6445E.spec" 1
99,
256,
32768,
3,
8,
0x9F,
0,
3,
0xC22017,
0x20,
0,
0x06,
0x04,
PROT_TYPE_SR,
{{0x3C,0x02},{0,0}},
0x02,
0x0B,
1,
SECTOR_LAYOUT_REGULAR,
{4096,{0,{0}}},
0x05,
0x01,
0x01,
# 25 "J:/ProjectEstimated2014/XMOS/HMI/REF_8080_RGB/HMI/slave/module_kentec_text_display/src/text_display.xc" 2
} };


void text_display_from_flash(chanend c_lcd, short curRow, short curCol, unsigned flStart, unsigned flEnd){

	char text[100];


	if (0!=fl_connectToDevice(flash_ports, spec, 1)){
		printstrln( "Could not connect to FLASH" );
		exit(-1);
	}


	if ( 0 != fl_readData(flStart, flEnd-flStart+1, text) ){
		printstrln( "Could not read the data partition" );
		exit(-1);
	}
	text[flEnd-flStart+1] = '\0';

	text_display_set_string(c_lcd, text, curRow, curCol);

}




void text_display_set_string(chanend c_lcd, char text[], short cursorRow, short cursorCol){
	unsigned buffer[ ( (800) * (16) /32) ], strArray[ 16 ][ ( (800) * (16) /32) ];
	unsigned index,offset,temp,bmapData;
	int pixel=0,row=0,i,charWidth,strPtr=0,strWidth=0,k=0,gap=2;
	unsigned short charArray[ 16 ][ 16 ];
	int position=0,line=0,count=0, bufIndex=0;
	unsigned short backColor, textColor;


	backColor = get_background_color();
	textColor = get_foreground_color();


	for(int il=0;il< 16 ;il++)
		for(int jl=0;jl< ( (800) * (16) /32) ;jl++)
			strArray[il][jl]= (unsigned)((unsigned)backColor | (unsigned)((unsigned)backColor << 16)) ;


	while( _safe_strlen(text) !=strPtr)
	{

		index = verdana_16h_index_table[text[strPtr]];
		offset = verdana_16h_offset_table[index];
		bmapData = verdana_16h_data_table[offset];
		charWidth = verdana_16h_width_table[index];


		for(int il=0;il< 16 ;il++)
			for(int jl=0;jl< 16 ;jl++)
				charArray[il][jl]=backColor;


		row=0; pixel=0;
		i=7;
		while(row< 16 )
		{
			temp=(bmapData>>i);
			temp=(temp)&0x01;
			if(temp)
				charArray[row][pixel] = textColor;
			else
				charArray[row][pixel] = backColor;
			pixel++;
			if(pixel==charWidth)
			{
				row++;
				pixel=0;
			}
			i--;
			if(i==-1)
			{
				offset++;
				bmapData = verdana_16h_data_table[offset];
				temp=bmapData;
				i=7;
			}
		}

		if(charWidth%2!=0) charWidth=charWidth+1;
		charWidth=charWidth+gap;


		row=0;
		pixel=(cursorCol/2)+strWidth;
		position=0;

		while(row< 16 )
		{
			if (pixel< ( (800) * (16) /32) )
				strArray[row][pixel]= (unsigned)((unsigned)charArray[row][position] | (unsigned)((unsigned)charArray[row][position+1] << 16)) ;
			pixel+=1;
			position+=2;
			if(position==charWidth)
			{
				row++;
				pixel=(cursorCol/2)+strWidth;
				position=0;
			}
		}

		strWidth+=(charWidth/2);
		strPtr++;
	}


	for(k=0;k< ( (800) * (16) /32) ;k++)
		buffer[k] =  (unsigned)((unsigned)backColor | (unsigned)((unsigned)backColor << 16)) ;


	while(1)
	{
		for(line=0;line< (480) ;line++)
		{
			lcd_req(c_lcd);
			if((line >= cursorRow) && (line < cursorRow+ 16 ))
				lcd_update(c_lcd, strArray[(line-cursorRow)% 16 ]);
			else
				lcd_update(c_lcd, buffer);
		}
	}
}
