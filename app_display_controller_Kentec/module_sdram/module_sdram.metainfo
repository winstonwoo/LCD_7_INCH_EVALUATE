-------------------------------------------------------------------------------
-- Descriptive metadata
-------------------------------------------------------------------------------

componentName = "SDRAM Controller"
componentFullName = ""
alternativeNames = { }
componentDescription = "Offers an SDRAM memory controller component using only 20 pins and runnnig in excess of 70 MBytes/sec"
componentVersion = "1v0"

-------------------------------------------------------------------------------
-- Parameter descriptions.
-------------------------------------------------------------------------------

configPoints =
{
  sdram_target =
  {
    short   = "SDRAM target",
    long    = "",
    help    = "This specifies the target",
    type    = "string",
    define  = "SDRAM_DEFAULT_IMPLEMENTATION",
    options = {"PINOUT_V1_IS42S16400F"},
    resourceUsageFlags = {"noeffect"},
    default = "PINOUT_V1_IS42S16400F"
  },
  enable_buffer_read =
  {
    short   = "Enable buffer read",
    long    = "",
    help    = "Enables the ability to read an arbitrary size buffer from SDRAM",
    units   = "",
    define  = "SDRAM_ENABLE_CMD_BUFFER_READ",
    type    = "bool",
    resourceUsageFlags = {},
    default = true
  },
  enable_buffer_write =
  {
    short   = "Enable buffer write",
    long    = "",
    help    = "Enables the ability to write an arbitrary size buffer to SDRAM",
    units   = "",
    define  = "SDRAM_ENABLE_CMD_BUFFER_WRITE",
    type    = "bool",
    resourceUsageFlags = {},
    default = true
  },
  enable_full_row_read =
  {
    short   = "Enable full row read",
    long    = "",
    help    = "Enables the ability to read a full row at once from SDRAM",
    units   = "",
    define  = "SDRAM_ENABLE_CMD_FULL_ROW_READ",
    type    = "bool",
    resourceUsageFlags = {},
    default = true
  },
  enable_full_row_write =
  {
    short   = "Enable full row write",
    long    = "",
    help    = "Enables the ability to read a full row at once from SDRAM",
    units   = "",
    define  = "SDRAM_ENABLE_CMD_FULL_ROW_WRITE",
    type    = "bool",
    resourceUsageFlags = {},
    default = true
  }

}

derivedValues = {}

ports = {

  p_sdram_adq = {
    short   = "sdram_adq",
    long    = "Combined SDRAM Address/Data Bus/Bank Address",
    help    = "",
    width   = 16
  },
  p_sdram_cas = {
    short   = "sdram_cas",
    long    = "Column Address Strobe",
    help    = "",
    width   = 1
  },
  p_sdram_ras = {
    short   = "sdram_ras",
    long    = "Row Address Strobe",
    help    = "",
    width   = 1
  },
  p_sdram_we = {
    short   = "sdram_we",
    long    = "SDRAM Write Enable",
    help    = "",
    width   = 1
  },
  p_sdram_clk = {
    short   = "sdram_clk",
    long    = "SDRAM Clock",
    help    = "",
    width   = 1
  }
}

channels = {
  c_sdram_client = {
    short = "SDRAM Client channel",
    long  = "Channel for the client to exchange commands and data with the SDRAM Controller",
    help  = "",
  },
}    

function getConfigStatus()
  local status = "Trusted Configuration"
  local issues = {}
  return status, issues
end
            
-------------------------------------------------------------------------------
-- Source generation functions
-------------------------------------------------------------------------------

generatedCode = {
  includes = {"sdram.h"},
  globals = [[
    sdram_ports_${swblock.params.sdram_target} sdram_${swblock.id}_resources = { 
      ${swblock.ports.p_sdram_adq},  
      ${swblock.ports.p_sdram_cas}, 
      ${swblock.ports.p_sdram_ras},  
      ${swblock.ports.p_sdram_we}, 
      ${swblock.ports.p_sdram_clk}, 
      ${swblock.clocks[1]}
    };
  ]],
  body = [[
    sdram_server_${swblock.params.sdram_target} (${swblock.chanends.c_sdram_client},  sdram_${swblock.id}_resources);
  ]]
}

files = {
  ["module_sdram/sdram_conf_example.h"] = "src/sdram_conf.h",
}

api = {
       'sdram_buffer_read_p',
       'sdram_buffer_read',
       'sdram_buffer_write_p',
       'sdram_buffer_write',
       'sdram_full_row_read_p',
       'sdram_full_row_read',
       'sdram_full_row_write_p',
       'sdram_full_row_write',
       'sdram_wait_until_idle_p',
       'sdram_wait_until_idle',
      }

